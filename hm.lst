Microsoft (R) Macro Assembler Version 6.15.8803		    05/10/19 17:18:40
hm.asm							     Page 1 - 1


				;-----------------------------------------------;
				;                                               ;
				;               HM-Editor                       ;
				;                                               ;
				;   A simulation of a simple text editor        ;
				;   Which allows you to (1) Read a file         ;
				;   (2) append into a read file                 ;
				;   (3) creat and edit contents of a new file   ;
				;-----------------------------------------------;
				;                                               ;
				;   Created By : Mubeen Ghauri P17-6107         ;
				;                Haris Nooori  P17-6003         ;
				;                                               ;
				;        As our Semester Project for:           ;
				;  Computer Organization And Assembly Language  ;
				;                FTY Fall 2019                  ; 
				;                                               ;
				;-----------------------------------------------;

				include irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				include macros.inc
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDELIB user32.lib


				;________________________DATA SEGMENT_______________________________________|
 00000000			.data

 = 00000080			    MAX = 128                    ;max chars to read
 00000000  00000081 [		    stringIn BYTE MAX+1 DUP (?)  ;room for null  
	    00
	   ]
 00000081 43 6F 64 65 20	    msg BYTE "Code run time: ",0  
	   72 75 6E 20 74
	   69 6D 65 3A 20
	   00
 00000091 00000000		    t1 DWORD ?


				    ;        DATA for output file

 = 00000032			    BUFSIZE = 50
 00000095  00000032 [		    buffer BYTE BUFSIZE DUP(0)
	    00
	   ]
 000000C7  00000032 [		    buffer2 BYTE BUFSIZE DUP(0)
	    00
	   ]
 000000F9  00000064 [		    tempBuff BYTE BUFSIZE*2 DUP(?)
	    00
	   ]
 0000015D 00000000		    stdInHandle DWORD ?
 00000161 00000000		    bytesRead DWORD ?

 00000165 43 61 6E 6E 6F	    errMsg BYTE "Cannot open file",0dh,0ah,0
	   74 20 6F 70 65
	   6E 20 66 69 6C
	   65 0D 0A 00
 00000178 69 6E 70 75 74	    filename     BYTE "input.txt",0
	   2E 74 78 74 00
 00000182 6F 75 74 70 75	    file2  BYTE "output.txt",0
	   74 2E 74 78 74
	   00
 0000018D 00000000		    fileHandle   DWORD ?	    ; handle to output file
 00000191 00000000		    byteCount    DWORD ?    	; number of bytes written
				   
 00000195 00000000		    bytesWritten DWORD ?

				    ;Data for console write------------------------------
 00000199 00000000		    outHandle DWORD ?
 0000019D 00000000		    cellsWritten DWORD 0
 000001A1 0000 0004		    xyPos COORD <0,4>

 000001A5 00			    key BYTE ?

				;___________________________CODE SEGMENT_____________________________________
 00000000			.code 
 00000000			main PROC
 00000000  E8 00000000 E	    call GetMseconds
 00000005  A3 00000091 R	    mov t1, eax

 0000000A  E8 00000000 E	    call ClrScr
				    mGotoxy 30, 8
 0000000F  52		     1		push edx
 00000010  B6 08	     1	    mov  dh,8
 00000012  B2 1E	     1	    mov  dl,30
 00000014  E8 00000000 E     1		call Gotoxy
 00000019  5A		     1		pop  edx
				    mWrite "|------------------------------|"
 000001A6		     1		.data				
 000001A6 7C 2D 2D 2D 2D     1		??0000 BYTE "|------------------------------|",0		
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 7C 00
 0000001A		     1		.code
 0000001A  52		     1		push edx
 0000001B  BA 000001A6 R     1		mov  edx,OFFSET ??0000
 00000020  E8 00000000 E     1		call Writestring
 00000025  5A		     1		pop  edx
				    mGotoxy 30, 9
 00000026  52		     1		push edx
 00000027  B6 09	     1	    mov  dh,9
 00000029  B2 1E	     1	    mov  dl,30
 0000002B  E8 00000000 E     1		call Gotoxy
 00000030  5A		     1		pop  edx
				    mWrite "| HM Editor                    |"
 000001C7		     1		.data				
 000001C7 7C 20 48 4D 20     1		??0001 BYTE "| HM Editor                    |",0		
	   45 64 69 74 6F
	   72 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 00
 00000031		     1		.code
 00000031  52		     1		push edx
 00000032  BA 000001C7 R     1		mov  edx,OFFSET ??0001
 00000037  E8 00000000 E     1		call Writestring
 0000003C  5A		     1		pop  edx
				    mGotoxy 30, 10
 0000003D  52		     1		push edx
 0000003E  B6 0A	     1	    mov  dh,10
 00000040  B2 1E	     1	    mov  dl,30
 00000042  E8 00000000 E     1		call Gotoxy
 00000047  5A		     1		pop  edx
				    mWrite "| Developed by:                |"
 000001E8		     1		.data				
 000001E8 7C 20 44 65 76     1		??0002 BYTE "| Developed by:                |",0		
	   65 6C 6F 70 65
	   64 20 62 79 3A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 00
 00000048		     1		.code
 00000048  52		     1		push edx
 00000049  BA 000001E8 R     1		mov  edx,OFFSET ??0002
 0000004E  E8 00000000 E     1		call Writestring
 00000053  5A		     1		pop  edx
				    mGotoxy 30, 11
 00000054  52		     1		push edx
 00000055  B6 0B	     1	    mov  dh,11
 00000057  B2 1E	     1	    mov  dl,30
 00000059  E8 00000000 E     1		call Gotoxy
 0000005E  5A		     1		pop  edx
				    mWrite "|                              |" 
 00000209		     1		.data				
 00000209 7C 20 20 20 20     1		??0003 BYTE "|                              |",0		
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 00
 0000005F		     1		.code
 0000005F  52		     1		push edx
 00000060  BA 00000209 R     1		mov  edx,OFFSET ??0003
 00000065  E8 00000000 E     1		call Writestring
 0000006A  5A		     1		pop  edx
				    mGotoxy 30, 12
 0000006B  52		     1		push edx
 0000006C  B6 0C	     1	    mov  dh,12
 0000006E  B2 1E	     1	    mov  dl,30
 00000070  E8 00000000 E     1		call Gotoxy
 00000075  5A		     1		pop  edx
				    mWrite "| M.Haris Noori P17-6003       |"
 0000022A		     1		.data				
 0000022A 7C 20 4D 2E 48     1		??0004 BYTE "| M.Haris Noori P17-6003       |",0		
	   61 72 69 73 20
	   4E 6F 6F 72 69
	   20 50 31 37 2D
	   36 30 30 33 20
	   20 20 20 20 20
	   20 7C 00
 00000076		     1		.code
 00000076  52		     1		push edx
 00000077  BA 0000022A R     1		mov  edx,OFFSET ??0004
 0000007C  E8 00000000 E     1		call Writestring
 00000081  5A		     1		pop  edx
				    mGotoxy 30, 13
 00000082  52		     1		push edx
 00000083  B6 0D	     1	    mov  dh,13
 00000085  B2 1E	     1	    mov  dl,30
 00000087  E8 00000000 E     1		call Gotoxy
 0000008C  5A		     1		pop  edx
				    mWrite "| Mubeen Ghauri P17-6107       |"
 0000024B		     1		.data				
 0000024B 7C 20 4D 75 62     1		??0005 BYTE "| Mubeen Ghauri P17-6107       |",0		
	   65 65 6E 20 47
	   68 61 75 72 69
	   20 50 31 37 2D
	   36 31 30 37 20
	   20 20 20 20 20
	   20 7C 00
 0000008D		     1		.code
 0000008D  52		     1		push edx
 0000008E  BA 0000024B R     1		mov  edx,OFFSET ??0005
 00000093  E8 00000000 E     1		call Writestring
 00000098  5A		     1		pop  edx
				    mGotoxy 30, 14
 00000099  52		     1		push edx
 0000009A  B6 0E	     1	    mov  dh,14
 0000009C  B2 1E	     1	    mov  dl,30
 0000009E  E8 00000000 E     1		call Gotoxy
 000000A3  5A		     1		pop  edx
				    mWrite "|------------------------------|"
 0000026C		     1		.data				
 0000026C 7C 2D 2D 2D 2D     1		??0006 BYTE "|------------------------------|",0		
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 7C 00
 000000A4		     1		.code
 000000A4  52		     1		push edx
 000000A5  BA 0000026C R     1		mov  edx,OFFSET ??0006
 000000AA  E8 00000000 E     1		call Writestring
 000000AF  5A		     1		pop  edx
				    ;mGotoxy 50, 20

				    ;program loading....
				    mGotoxy 35, 15   
 000000B0  52		     1		push edx
 000000B1  B6 0F	     1	    mov  dh,15
 000000B3  B2 23	     1	    mov  dl,35
 000000B5  E8 00000000 E     1		call Gotoxy
 000000BA  5A		     1		pop  edx
 000000BB  B8 000003E8		    mov  eax,1000 
 000000C0  E8 00000000 E	    call Delay
				    mWrite "Loading ."
 0000028D		     1		.data				
 0000028D 4C 6F 61 64 69     1		??0007 BYTE "Loading .",0		
	   6E 67 20 2E 00
 000000C5		     1		.code
 000000C5  52		     1		push edx
 000000C6  BA 0000028D R     1		mov  edx,OFFSET ??0007
 000000CB  E8 00000000 E     1		call Writestring
 000000D0  5A		     1		pop  edx
 000000D1  B8 000003E8		    mov  eax,1000 
 000000D6  E8 00000000 E	    call Delay
				    mWrite " ."
 00000297		     1		.data				
 00000297 20 2E 00	     1		??0008 BYTE " .",0		
 000000DB		     1		.code
 000000DB  52		     1		push edx
 000000DC  BA 00000297 R     1		mov  edx,OFFSET ??0008
 000000E1  E8 00000000 E     1		call Writestring
 000000E6  5A		     1		pop  edx
 000000E7  E8 00000000 E	    call Delay
 000000EC  E8 00000000 E	    call ClrScr

				    mGotoxy 15, 1
 000000F1  52		     1		push edx
 000000F2  B6 01	     1	    mov  dh,1
 000000F4  B2 0F	     1	    mov  dl,15
 000000F6  E8 00000000 E     1		call Gotoxy
 000000FB  5A		     1		pop  edx
				    mWriteLn "Do you want to read from file- (Y/N) ?"
 0000029A		     2		.data				
 0000029A 44 6F 20 79 6F     2		??0009 BYTE "Do you want to read from file- (Y/N) ?",0		
	   75 20 77 61 6E
	   74 20 74 6F 20
	   72 65 61 64 20
	   66 72 6F 6D 20
	   66 69 6C 65 2D
	   20 28 59 2F 4E
	   29 20 3F 00
 000000FC		     2		.code
 000000FC  52		     2		push edx
 000000FD  BA 0000029A R     2		mov  edx,OFFSET ??0009
 00000102  E8 00000000 E     2		call Writestring
 00000107  5A		     2		pop  edx
 00000108  E8 00000000 E     1		call Crlf
 0000010D  E8 00000000 E	    call ReadChar
 00000112  A2 000001A5 R	    mov key, al

 00000117  80 3D 000001A5 R	    cmp key, "y"            ;READ OR WRITE
	   79
 0000011E  74 13		    je read_from_file
 00000120  EB 00		    jmp write_in_file

 00000122			    write_in_file:
				    ;WRITE FILE CODE STARTS HERE
 00000122  E8 00000000 E	      call ClrScr
 00000127  E8 0000005F		      call initTextArea
 0000012C  E8 0000007D		      call GetInput

				    

 00000131  EB 0A		      jmp QuitNow
				    ;WRITE FILE CODE ENDS HERE

 00000133			    read_from_file:       
 00000133  E8 00000000 E	      call ClrScr
 00000138  E8 0000009C		      call GetOutput
				    

 0000013D			    QuitNow:
				      mGotoxy 0, 18
 0000013D  52		     1		push edx
 0000013E  B6 12	     1	    mov  dh,18
 00000140  B2 00	     1	    mov  dl,0
 00000142  E8 00000000 E     1		call Gotoxy
 00000147  5A		     1		pop  edx
				      mWriteLn "Press Enter to exit the Program "
 000002C1		     2		.data				
 000002C1 50 72 65 73 73     2		??000A BYTE "Press Enter to exit the Program ",0		
	   20 45 6E 74 65
	   72 20 74 6F 20
	   65 78 69 74 20
	   74 68 65 20 50
	   72 6F 67 72 61
	   6D 20 00
 00000148		     2		.code
 00000148  52		     2		push edx
 00000149  BA 000002C1 R     2		mov  edx,OFFSET ??000A
 0000014E  E8 00000000 E     2		call Writestring
 00000153  5A		     2		pop  edx
 00000154  E8 00000000 E     1		call Crlf
 00000159  E8 00000000 E	      call WaitMsg
 0000015E  E8 00000000 E	      call ClrScr

				    
 00000163  E8 00000000 E	      call crlf
 00000168  BA 00000081 R	      mov edx, OFFSET msg
 0000016D  E8 00000000 E	      call WriteString

 00000172  8B 1D 00000091 R	      mov ebx, t1
 00000178  E8 00000000 E	      call GetMseconds
 0000017D  2B C3		      sub eax, ebx
 0000017F  E8 00000000 E	      call WriteInt


				    exit
 0000018B			main ENDP

 0000018B			initTextArea PROC

				    ;-----------------------------------------
				    ;  procedure to initialise the console   -      
				    ;  with a starting text.                 -
				    ;  procedure is used in this case to     -
				    ;  keep a clean main procedure           -
				    ;-----------------------------------------

					mGotoxy 30, 2
 0000018B  52		     1		push edx
 0000018C  B6 02	     1	    mov  dh,2
 0000018E  B2 1E	     1	    mov  dl,30
 00000190  E8 00000000 E     1		call Gotoxy
 00000195  5A		     1		pop  edx
					mWrite "Start Entering Text !!!"
 000002E2		     1		.data				
 000002E2 53 74 61 72 74     1		??000B BYTE "Start Entering Text !!!",0		
	   20 45 6E 74 65
	   72 69 6E 67 20
	   54 65 78 74 20
	   21 21 21 00
 00000196		     1		.code
 00000196  52		     1		push edx
 00000197  BA 000002E2 R     1		mov  edx,OFFSET ??000B
 0000019C  E8 00000000 E     1		call Writestring
 000001A1  5A		     1		pop  edx
					mGotoxy 0, 5
 000001A2  52		     1		push edx
 000001A3  B6 05	     1	    mov  dh,5
 000001A5  B2 00	     1	    mov  dl,0
 000001A7  E8 00000000 E     1		call Gotoxy
 000001AC  5A		     1		pop  edx

 000001AD  C3				ret

 000001AE			initTextArea ENDP

 000001AE			GetInput PROC;.....................................................

				    ;-------------------------------------
				    ;  Read contents of the console      -
				    ;  load the contents into 'buffer2'  -
				    ;  call writeF to write the contents -
				    ;  into a specified output file      - 
				    ;-------------------------------------

					; Get handle to standard input
					INVOKE GetStdHandle, STD_INPUT_HANDLE
 000001B5  A3 0000015D R		mov stdInHandle,eax

					; Wait for user input
					INVOKE ReadConsole, stdInHandle, ADDR buffer2,
					  BUFSIZE, ADDR bytesRead, 0

 000001D3  E8 0000010A		    call writeF

 000001D8  C3				ret
 000001D9			GetInput ENDP;....................................................

 000001D9			GetOutput PROC;..................................................................

				    ;------------------------------------------
				    ;  Read contents of file specified        -
				    ;  load the contents into 'buffer'        -
				    ;  call loadConsoleText to load contents  -
				    ;  of buffer onto the console             -
				    ;------------------------------------------

				    INVOKE CreateFile,
					  ADDR filename, GENERIC_READ, DO_NOT_SHARE, NULL,
					  OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0

 000001F5  A3 0000018D R	    mov fileHandle,eax		; save file handle
				    .IF eax == INVALID_HANDLE_VALUE
 000001FF  BA 00000165 R	      mov  edx,OFFSET errMsg		; Display error message
 00000204  E8 00000000 E	      call WriteString
 00000209  C3			      ret
				      ;jmp  QuitNow
				    .ENDIF

				    INVOKE ReadFile,		; write text to file
					    fileHandle,		; file handle
					    ADDR buffer,		; buffer pointer
					    bufSize,		; number of bytes to read
					    ADDR byteCount,		; number of bytes read
					    0		; overlapped execution flag

				    INVOKE CloseHandle, fileHandle

 0000022E  8B 35 00000191 R	    mov esi,byteCount		; insert null terminator
 00000234  C6 86 00000095 R	    mov buffer[esi],0		; into buffer
	   00
 0000023B  46			    inc esi
 0000023C  C6 86 00000095 R	    mov buffer[esi],0
	   00
 00000243  46			    inc esi
 00000244  C6 86 00000095 R	    mov buffer[esi],0
	   00
				    ;mov edx,OFFSET buffer		; display the buffer
				    ;call WriteString

 0000024B  E8 000000EE		    call loadConsoleText

 00000250  E8 FFFFFF59		    call GetInput

 00000255  C3			    ret
 00000256			GetOutput ENDP;.......................................................................


 00000256			joinBuff PROC

				    ;---------------------------------------
				    ;  procedure to join the contents of   - 
				    ;  buffer (inputFileContentsBuffer)    - 
				    ;  and                                 - 
				    ;  buffer2 (consoleContentsBuffer)     -
				    ;  into tempBuff.                      - 
				    ;  the contents of tempBuff are then   - 
				    ;  written to output file              -
				    ;---------------------------------------


 00000256  E8 00000000 E	    call crlf
 0000025B  E8 00000000 E	    call crlf

 00000260  8B 0D 00000191 R	    mov ecx, byteCount    ; number of bytes read from file

				    
 00000266  BB 00000000		    mov ebx, 0
 0000026B  BA 00000000		    mov edx, 0

 00000270  8A 82 00000095 R	    mov al,  buffer[edx]

				    .IF al == 0
 0000027A  EB 27		        jmp j2
				    .ENDIF

 0000027C			    L1:
 0000027C  8A 82 00000095 R	        mov al,  buffer[edx]
 00000282  88 83 000000F9 R	        mov tempBuff[ebx], al
 00000288  E8 00000000 E	        call writechar
				        ;call crlf
 0000028D  FE C0		        inc al
 0000028F  43			        inc ebx
 00000290  42			        inc edx

				        .IF al == 0
 00000295  EB 0C		            jmp j2
				        .ENDIF

				        .IF ebx == byteCount
 0000029F  EB 02		            jmp j2
				        .ENDIF

				        
 000002A1  E2 D9		    loop L1

 000002A3			    j2:
 000002A3  A0 000000C7 R	        mov al, buffer2
 000002A8  BA 00000000		        mov edx, 0
 000002AD  8B 0D 00000161 R	        mov ecx, bytesRead          ; number of bytes read from console

 000002B3			        L2:
 000002B3  8A 82 000000C7 R	            mov al,  buffer2[edx]
 000002B9  88 83 000000F9 R	            mov tempBuff[ebx], al
 000002BF  E8 00000000 E	            call writechar
 000002C4  42			            inc edx
 000002C5  43			            inc ebx


				            .IF ebx == bytesRead
 000002CE  EB 02		                jmp quitJoin
				            .ENDIF

 000002D0  E2 E1		        loop l2

 000002D2			    quitJoin:

 000002D2  BA 000000F9 R	    mov edx, offset tempBuff
 000002D7  E8 00000000 E	    call writestring
 000002DC  E8 00000000 E	    call crlf

 000002E1  C3			    ret

 000002E2			joinBuff ENDP

 000002E2			writeF PROC;---------------------------------------------
				    
				    ;----------------------------------------------
				    ; procedure to write contents of buffer into  -
				    ; a specified file                            -
				    ; To be used with INVOKE directive            - 
				    ;----------------------------------------------

 000002E2  E8 FFFFFF6F		    call joinBuff

				    ; Creating file

				    INVOKE CreateFile,
				      ADDR file2, GENERIC_WRITE, DO_NOT_SHARE, NULL,
				      CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0

 00000303  A3 0000018D R	    mov filehandle, eax

				    ; check to see if file is created succesfuly
				    ; if not then an error msg is printed to the screen

				    .IF eax == INVALID_HANDLE_VALUE
 0000030D  BA 00000165 R	      mov  edx,OFFSET errMsg        ; Display error message
 00000312  E8 00000000 E	      call WriteString
 00000317  EB 24		      jmp  QuitNow
				    .ENDIF

				    INVOKE WriteFile,       ; write text to file
				        fileHandle,     ; file handle
				        ADDR tempBuff,        ; buffer pointer
				        bufSize*2,       ; number of bytes to write
				        ADDR bytesWritten,      ; number of bytes written
				        0       ; overlapped execution flag

				    INVOKE CloseHandle, fileHandle
				    
 0000033D			    QuitNow:

 0000033D  C3			    ret

 0000033E			writeF ENDP

 0000033E			loadConsoleText PROC
				    
				    ;----------------------------------------------
				    ; load contents of buffer to console          -
				    ; used to load the contents read from file    -      
				    ; to our console output                       -
				    ;----------------------------------------------

				    mGotoxy 30,2
 0000033E  52		     1		push edx
 0000033F  B6 02	     1	    mov  dh,2
 00000341  B2 1E	     1	    mov  dl,30
 00000343  E8 00000000 E     1		call Gotoxy
 00000348  5A		     1		pop  edx
				    mWrite "Contents Of File : "
 000002FA		     1		.data				
 000002FA 43 6F 6E 74 65     1		??000C BYTE "Contents Of File : ",0		
	   6E 74 73 20 4F
	   66 20 46 69 6C
	   65 20 3A 20 00
 00000349		     1		.code
 00000349  52		     1		push edx
 0000034A  BA 000002FA R     1		mov  edx,OFFSET ??000C
 0000034F  E8 00000000 E     1		call Writestring
 00000354  5A		     1		pop  edx
				    

				    ; Get the Console standard output handle:
				    INVOKE GetStdHandle,STD_OUTPUT_HANDLE
 0000035C  A3 00000199 R	    mov outHandle,eax

				    ;Write contents of buffer to console
				    INVOKE WriteConsoleOutputCharacter,
				      outHandle, ADDR buffer, BufSize,
				      xyPos, ADDR cellsWritten

				    mGotoxy 0, 6
 0000037E  52		     1		push edx
 0000037F  B6 06	     1	    mov  dh,6
 00000381  B2 00	     1	    mov  dl,0
 00000383  E8 00000000 E     1		call Gotoxy
 00000388  5A		     1		pop  edx
				    mWrite "Enter Text to append into read file : "
 0000030E		     1		.data				
 0000030E 45 6E 74 65 72     1		??000D BYTE "Enter Text to append into read file : ",0		
	   20 54 65 78 74
	   20 74 6F 20 61
	   70 70 65 6E 64
	   20 69 6E 74 6F
	   20 72 65 61 64
	   20 66 69 6C 65
	   20 3A 20 00
 00000389		     1		.code
 00000389  52		     1		push edx
 0000038A  BA 0000030E R     1		mov  edx,OFFSET ??000D
 0000038F  E8 00000000 E     1		call Writestring
 00000394  5A		     1		pop  edx
				    mGotoxy 0,8
 00000395  52		     1		push edx
 00000396  B6 08	     1	    mov  dh,8
 00000398  B2 00	     1	    mov  dl,0
 0000039A  E8 00000000 E     1		call Gotoxy
 0000039F  5A		     1		pop  edx
 000003A0  C3			      ret

 000003A1			loadConsoleText ENDP

				end main
Microsoft (R) Macro Assembler Version 6.15.8803		    05/10/19 17:18:40
hm.asm							     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
NewLine  . . . . . . . . . . . .	Proc
ShowFlag . . . . . . . . . . . .	Proc
ShowRegister . . . . . . . . . .	Proc
Startup  . . . . . . . . . . . .	Proc
WriteSpace . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mNewLine . . . . . . . . . . . .	Proc
mReadStr . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteStr  . . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000005
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 Byte
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000335 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003A1 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ClrScr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetInput . . . . . . . . . . . .	P Near	 000001AE _TEXT	Length= 0000002B Public STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetOutput  . . . . . . . . . . .	P Near	 000001D9 _TEXT	Length= 0000007D Public STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
initTextArea . . . . . . . . . .	P Near	 0000018B _TEXT	Length= 00000023 Public STDCALL
joinBuff . . . . . . . . . . . .	P Near	 00000256 _TEXT	Length= 0000008C Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000027C _TEXT	
  j2 . . . . . . . . . . . . . .	L Near	 000002A3 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000002B3 _TEXT	
  quitJoin . . . . . . . . . . .	L Near	 000002D2 _TEXT	
loadConsoleText  . . . . . . . .	P Near	 0000033E _TEXT	Length= 00000063 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000018B Public STDCALL
  write_in_file  . . . . . . . .	L Near	 00000122 _TEXT	
  read_from_file . . . . . . . .	L Near	 00000133 _TEXT	
  QuitNow  . . . . . . . . . . .	L Near	 0000013D _TEXT	
writeF . . . . . . . . . . . . .	P Near	 000002E2 _TEXT	Length= 0000005C Public STDCALL
  QuitNow  . . . . . . . . . . .	L Near	 0000033D _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 000001A6 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 000001C7 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 000001E8 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00000209 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 0000022A _DATA	
??0005 . . . . . . . . . . . . .	Byte	 0000024B _DATA	
??0006 . . . . . . . . . . . . .	Byte	 0000026C _DATA	
??0007 . . . . . . . . . . . . .	Byte	 0000028D _DATA	
??0008 . . . . . . . . . . . . .	Byte	 00000297 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 0000029A _DATA	
??000A . . . . . . . . . . . . .	Byte	 000002C1 _DATA	
??000B . . . . . . . . . . . . .	Byte	 000002E2 _DATA	
??000C . . . . . . . . . . . . .	Byte	 000002FA _DATA	
??000D . . . . . . . . . . . . .	Byte	 0000030E _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
BUFSIZE  . . . . . . . . . . . .	Number	 00000032h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
MAX  . . . . . . . . . . . . . .	Number	 00000080h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer2  . . . . . . . . . . . .	Byte	 000000C7 _DATA	
buffer . . . . . . . . . . . . .	Byte	 00000095 _DATA	
byteCount  . . . . . . . . . . .	DWord	 00000191 _DATA	
bytesRead  . . . . . . . . . . .	DWord	 00000161 _DATA	
bytesWritten . . . . . . . . . .	DWord	 00000195 _DATA	
cellsWritten . . . . . . . . . .	DWord	 0000019D _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errMsg . . . . . . . . . . . . .	Byte	 00000165 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
file2  . . . . . . . . . . . . .	Byte	 00000182 _DATA	
fileHandle . . . . . . . . . . .	DWord	 0000018D _DATA	
filename . . . . . . . . . . . .	Byte	 00000178 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
key  . . . . . . . . . . . . . .	Byte	 000001A5 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
msg  . . . . . . . . . . . . . .	Byte	 00000081 _DATA	
outHandle  . . . . . . . . . . .	DWord	 00000199 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
stdInHandle  . . . . . . . . . .	DWord	 0000015D _DATA	
stringIn . . . . . . . . . . . .	Byte	 00000000 _DATA	
t1 . . . . . . . . . . . . . . .	DWord	 00000091 _DATA	
tempBuff . . . . . . . . . . . .	Byte	 000000F9 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
xyPos  . . . . . . . . . . . . .	COORD	 000001A1 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
